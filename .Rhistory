y = "DBPM")
# Get top 10 players for some variable
get_top10 <- function(df, column) {
require(rlang)
column <- enquo(column)
dplyr::top_n(df, n = 10, wt = !!column) %>%
pull(namePlayer)
}
# get top 10 for desired variable (in this case ratioBPM)
top10_BPM <- top_n(adv_player_stats, n = 10, wt = ratioBPM) %>%
pull(namePlayer)
adv_player_stats %>%
ggplot(aes(x = ratioOBPM, y = ratioDBPM)) +
geom_point(color = "#011627") +
gghighlight::gghighlight(namePlayer %in% top10_BPM, label_key = namePlayer,
label_params = list(fill = ggplot2::alpha("white", 0.8),
box.padding = 0,
family = "Roboto Condensed"),
unhighlighted_colour = "#007190") +
geom_hline(yintercept = 0, alpha = 0.6, lty = "dashed") +
geom_vline(xintercept = 0, alpha = 0.6, lty = "dashed") +
labs(title = "Offensive vs. Defensive Box Plus-Minus: Top 10 Box Plus/Minus",
subtitle = glue::glue("NBA 2019-2020 Season"),
caption = glue::glue("data via nbastatR"),
x = "OBPM",
y = "DBPM") + hrbrthemes::theme_ipsum_rc()
# Get top 10 players for some variable
get_top10 <- function(df, column) {
require(rlang)
column <- enquo(column)
dplyr::top_n(df, n = 10, wt = !!column) %>%
pull(namePlayer)
}
# get top 10 for desired variable (in this case ratioBPM)
top10_BPM <- top_n(adv_player_stats, n = 10, wt = ratioBPM) %>%
pull(namePlayer)
adv_player_stats %>%
ggplot(aes(x = ratioOBPM, y = ratioDBPM)) +
geom_point(color = "#011627") +
gghighlight::gghighlight(namePlayer %in% top10_BPM, label_key = namePlayer,
label_params = list(fill = ggplot2::alpha("white", 0.8),
box.padding = 0,
family = "Roboto Condensed"),
unhighlighted_colour = "#007190") +
geom_hline(yintercept = 0, alpha = 0.6, lty = "dashed") +
geom_vline(xintercept = 0, alpha = 0.6, lty = "dashed") +
labs(title = "Offensive vs. Defensive Box Plus-Minus: Top 10 Box Plus/Minus",
subtitle = glue::glue("NBA 2019-2020 Season"),
caption = glue::glue("data via nbastatR"),
x = "OBPM",
y = "DBPM")
adv_player_stats %>%
ggplot(aes(x = ratioOBPM, y = ratioDBPM)) +
geom_point() +
geom_hline(yintercept = 0, alpha = 0.6, lty = "dashed") +
geom_vline(xintercept = 0, alpha = 0.6, lty = "dashed") +
labs(title = "Offensive vs. Defensive Box Plus-Minus",
subtitle = glue::glue("NBA 2019-2020 season"),
caption = glue::glue("data via nbastatR"),
x = "OBPM",
y = "DBPM") + theme_bw()
extrafont::loadfonts()
# Get top 10 players for some variable
get_top10 <- function(df, column) {
require(rlang)
column <- enquo(column)
dplyr::top_n(df, n = 10, wt = !!column) %>%
pull(namePlayer)
}
# get top 10 for desired variable (in this case ratioBPM)
top10_BPM <- top_n(adv_player_stats, n = 10, wt = ratioBPM) %>%
pull(namePlayer)
adv_player_stats %>%
ggplot(aes(x = ratioOBPM, y = ratioDBPM)) +
geom_point(color = "#011627") +
gghighlight::gghighlight(namePlayer %in% top10_BPM, label_key = namePlayer,
label_params = list(fill = ggplot2::alpha("white", 0.8),
box.padding = 0,
family = "Roboto Condensed"),
unhighlighted_colour = "#007190") +
geom_hline(yintercept = 0, alpha = 0.6, lty = "dashed") +
geom_vline(xintercept = 0, alpha = 0.6, lty = "dashed") +
labs(title = "Offensive vs. Defensive Box Plus-Minus: Top 10 Box Plus/Minus",
subtitle = glue::glue("NBA 2019-2020 Season"),
caption = glue::glue("data via nbastatR"),
x = "OBPM",
y = "DBPM")
# Creating a faceted plot comparing guitar- and piano-driven songs for bigram frequency
bb_tagged %>% mutate(next_chord = lead(chord, 1), next_title = lead(title, 1),
bigram = str_c(chord, next_chord, sep = " ")) %>%
filter(title == next_title) %>% count(bigram, instrument, sort = T) %>%
filter(bigram %in% top_20_bigram) %>%
ggplot(aes(x = bigram, y = n, fill = bigram))+
geom_col()+
coord_flip() +
xlab("Bigram") +
ylab("Instruments") +
facet_grid(~instrument) +
theme(legend.position = "none")
library(readr)
library(dplyr)
library(ggplot2)
library(stringr)
setwd("/Users/dunk/SpotifyStats")
bb <- read_csv("datasets/bb_chords.csv")
bb_count <- bb %>% count(chord) %>% arrange(desc(n))
# Displaying the top 20 chords
head(bb_count, 20)
# Creating a bar plot from bb_count
bb_count %>%
slice(1:20) %>%
mutate(share = n/sum(n),
chord = reorder(chord, share)) %>%
ggplot(aes(x = chord, y = share, fill = chord)) +
geom_col() +
coord_flip() +
xlab("Share of Total Chords") +
ylab("Chord") +
theme(legend.position = "none")
# A chord change is simply a bigram — a two-"word" phrase — composed of a starting chord and a following chord.
# Wrangling and counting bigrams
bb_bigram_count <- bb %>% mutate(next_chord = lead(chord, 1), next_title = lead(title, 1)) %>%
mutate(bigram = str_c(chord, next_chord, sep = " ")) %>% filter(title == next_title) %>%
count(bigram) %>% arrange(desc(n))
# Displaying the first 20 rows of bb_bigram_count
head(bb_bigram_count, 20)
# Visualizing the most common chord progressions
# Creating a column plot from bb_bigram_count
bb_bigram_count %>%
slice(1:20) %>%
mutate(share = n/sum(n),
bigram = reorder(bigram, share)) %>% arrange(desc(n)) %>%
ggplot(aes(share, bigram, fill = bigram)) +
geom_col() +
coord_flip() +
xlab("Share of Chord Changes") +
ylab("Chord Changes") +
theme(legend.position = "none",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Finding the most common artists
# Finding 30 artists with the most songs in the corpus
bb_30_artists <- bb %>% select(artist, title) %>% unique() %>% count(artist, sort = T)
#.... YOUR CODE FOR TASK 6 ....
# Displaying 30 artists with the most songs in the corpus
head(bb_30_artists, 30)
# Dataframe of artists by instrument
tags <- tibble(
artist = c('Abba', 'Billy Joel', 'Elton John', 'Stevie Wonder', 'The Rolling Stones', 'The Beatles', 'Eric Clapton'),
instrument = c('piano', 'piano', 'piano', 'piano', 'guitar', 'guitar', 'guitar'))
# Creating a new dataframe bb_tagged that includes a new column instrument from tags
bb_tagged <- bb %>% inner_join(tags, by = "artist")
# .... YOUR CODE FOR TASK 7 ....
# Displaying the new data frame
bb_tagged
# The top 20 most common chords
top_20 <- bb_count$chord[1:20]
# Comparing the frequency of the 20 most common chords in piano- and guitar-driven songs
bb_tagged %>%
filter(chord %in% top_20) %>%
count(chord, instrument, sort = T) %>%
ggplot(aes(x = chord, y = n, fill = chord)) +
geom_col() +
facet_grid( ~ instrument) +
coord_flip() +
xlab("Chords") +
ylab("Frequency of Chords") +
theme(legend.position = "none") + ggtitle("Chords by Instrument")
bb_tagged %>%
filter(chord %in% top_20) %>%
count(chord, artist, sort = T) %>%
ggplot(aes(x = chord, y = n, fill = chord)) +
geom_col() +
facet_grid( ~ artist) +
coord_flip() +
xlab("Chords") +
ylab("Frequency of Chords") +
theme(legend.position = "none") + ggtitle("Chords by Artist")
# The top 20 most common bigrams
top_20_bigram <- bb_bigram_count$bigram[1:20]
# Creating a faceted plot comparing guitar- and piano-driven songs for bigram frequency
bb_tagged %>% mutate(next_chord = lead(chord, 1), next_title = lead(title, 1),
bigram = str_c(chord, next_chord, sep = " ")) %>%
filter(title == next_title) %>% count(bigram, instrument, sort = T) %>%
filter(bigram %in% top_20_bigram) %>%
ggplot(aes(x = bigram, y = n, fill = bigram))+
geom_col()+
coord_flip() +
xlab("Bigram") +
ylab("Instruments") +
facet_grid(~instrument) +
theme(legend.position = "none")
# .... MODIFIED CODE FROM TASK 4 ....
# .... MODIFIED CODE FROM TASK 8 ....
# Displaying the first 20 rows of bb_bigram_count
head(bb_bigram_count, 20)
library(tidyverse)
library(httr)
library(jsonlite)
library(lubridate)
library(paletteer)
library(extrafont)
library(sf)
library(cowplot)
library(prismatic)
library(here)
library(magick)
library(ggtext)
#custom theme
theme_owen <- function () {
theme_minimal(base_size=12, base_family="Gill Sans MT") %+replace%
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
plot.background = element_rect(fill = 'floralwhite', color = "floralwhite"),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank()
)
}
#read in pouplation data. add abbreviations
pop <- read.csv("popdata.csv")
colnames(pop) <- c("StateName", "population")
pop$state <- c(state.abb, "DC", "PR")
#Get current COVID data from the covid tracking project
url <- "https://covidtracking.com/api/states"
df <- fromJSON(url) %>% as.data.frame
#Clean up the date time
df$date <- ymd(substr(df$dateModified, 1, 10))
#Select the variables we care about and merge with the population data
df <- df %>% select(state, positive, hospitalized, death, total, date)
df <- left_join(df, pop, by = "state")
#Calculate total positive cases and death per millino
df$total.positives.per.million <- (df$positive / df$population) * 1000000
df$total.deaths.per.million <- (df$death / df$population) * 1000000
#Get hex boundaries
us_hex <- st_read("Hex States Shapefile/HexStates.shp") %>%
janitor::clean_names() %>%
mutate_if(is.factor, as.character) %>%
st_transform(crs = 3395)
#Combine hex boundaries with our covid data
df <- left_join(us_hex, df, by = c("state_abbr" = "state"))
#Find the center of each hex (state) so that we can add text
centers <-
st_centroid(us_hex) %>%
st_coordinates() %>%
as_tibble() %>%
set_names(str_to_lower)
df_center <- tibble(abbr = us_hex$state_abbr) %>%
bind_cols(centers)
#Combine the centeroid data with the orginial data frame
df <- left_join(df, df_center, by = c("state_abbr" = "abbr"))
#Make the text color white if it's above the third quartile deaths per million and black otherwise
df$textColor <- ifelse(df$total.deaths.per.million >= quantile(df$total.deaths.per.million, .75, na.rm = TRUE), "white", "black")
#Create an outline of the United States
us_hex_outline <- us_hex %>%
st_union() %>%
st_buffer(dist = 30000)
#Create plot
p <- df %>%
ggplot() +
geom_sf(aes(fill = total.deaths.per.million), size = 1, color = 'white') +
geom_sf(data = us_hex_outline, color = "#F7945DFF", fill = "transparent", size = 1) +
geom_text(data = df, aes(x, y, label = state_abbr, color = textColor),
family = "Gill Sans MT", size = 2.25, fontface = 'bold') +
geom_text(data = df, aes(x, y, label = round(total.deaths.per.million, 2), color = textColor),
family = "Gill Sans MT", size = 2, fontface = 'bold', vjust = 2.5)+
rcartocolor::scale_fill_carto_c(
name = "Confirmed Deaths Per Million Residents",
palette = 10,
trans = "log10",
breaks = scales::log_breaks(n = 8)) +
theme_owen()  +
scale_color_identity() +
theme(text=element_text(size=14,  family="Gill Sans MT"),
plot.title = element_text(hjust = 0.5, face = "bold",  vjust = 0, size = 15),
plot.subtitle = element_text(hjust = 0.5, size = 9, vjust = 0),
plot.caption = element_text(face = "italic", size = 8, hjust = .5, vjust = 8),
legend.spacing.x = unit(0, 'cm'),
legend.title=element_text(size=11),
legend.text = element_text(size = rel(0.6)),
legend.margin=margin(10,0,-1,0),
legend.position = 'bottom',
plot.margin = margin(0, -.5, 0, -.5, "cm"),
legend.box.margin=margin(-30,0,15,0))  +
guides(fill=guide_legend(
keywidth=.5,
keyheight=.15,
default.unit="inch",
label.position = 'bottom',
title.position = 'top',
title.hjust = .5,
title.vjust = 0,
label.vjust = 3,
nrow = 1)) +
labs(title = "Confirmed Deaths Due To COVID-19 Per Million Residents",
caption  = paste0("Data updated ", format(Sys.time(), "%b %d %X")),
subtitle = paste0("Total Confirmed Deaths Due To COVID-19 In The United States: ", scales::comma_format()(sum(df$death, na.rm = TRUE))))
#custom theme
theme_owen <- function () {
theme_minimal(base_size=12, base_family="Gill Sans MT") %+replace%
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
plot.background = element_rect(fill = 'floralwhite', color = "floralwhite"),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank()
)
}
getwd
getwd()
setwd("/Users/dunk/COVID-19")
#read in pouplation data. add abbreviations
pop <- read.csv("popdata.csv")
colnames(pop) <- c("StateName", "population")
pop$state <- c(state.abb, "DC", "PR")
#Get current COVID data from the covid tracking project
url <- "https://covidtracking.com/api/states"
df <- fromJSON(url) %>% as.data.frame
df <- fromJSON(url) %>% as.data.frame
View(pop)
df <- fromJSON(url) %>% as.data.frame()
View(df)
#Clean up the date time
df$date <- ymd(substr(df$dateModified, 1, 10))
View(df)
#Select the variables we care about and merge with the population data
df <- df %>% select(state, positive, hospitalized, death, total, date)
df <- left_join(df, pop, by = "state")
#Calculate total positive cases and death per millino
df$total.positives.per.million <- (df$positive / df$population) * 1000000
df$total.deaths.per.million <- (df$death / df$population) * 1000000
#Get hex boundaries
us_hex <- st_read("Hex States Shapefile/HexStates.shp") %>%
janitor::clean_names() %>%
mutate_if(is.factor, as.character) %>%
st_transform(crs = 3395)
#Combine hex boundaries with our covid data
df <- left_join(us_hex, df, by = c("state_abbr" = "state"))
#Find the center of each hex (state) so that we can add text
centers <-
st_centroid(us_hex) %>%
st_coordinates() %>%
as_tibble() %>%
set_names(str_to_lower)
df_center <- tibble(abbr = us_hex$state_abbr) %>%
bind_cols(centers)
#Combine the centeroid data with the orginial data frame
df <- left_join(df, df_center, by = c("state_abbr" = "abbr"))
#Make the text color white if it's above the third quartile deaths per million and black otherwise
df$textColor <- ifelse(df$total.deaths.per.million >= quantile(df$total.deaths.per.million, .75, na.rm = TRUE), "white", "black")
#Create an outline of the United States
us_hex_outline <- us_hex %>%
st_union() %>%
st_buffer(dist = 30000)
#Create plot
p <- df %>%
ggplot() +
geom_sf(aes(fill = total.deaths.per.million), size = 1, color = 'white') +
geom_sf(data = us_hex_outline, color = "#F7945DFF", fill = "transparent", size = 1) +
geom_text(data = df, aes(x, y, label = state_abbr, color = textColor),
family = "Gill Sans MT", size = 2.25, fontface = 'bold') +
geom_text(data = df, aes(x, y, label = round(total.deaths.per.million, 2), color = textColor),
family = "Gill Sans MT", size = 2, fontface = 'bold', vjust = 2.5)+
rcartocolor::scale_fill_carto_c(
name = "Confirmed Deaths Per Million Residents",
palette = 10,
trans = "log10",
breaks = scales::log_breaks(n = 8)) +
theme_owen()  +
scale_color_identity() +
theme(text=element_text(size=14,  family="Gill Sans MT"),
plot.title = element_text(hjust = 0.5, face = "bold",  vjust = 0, size = 15),
plot.subtitle = element_text(hjust = 0.5, size = 9, vjust = 0),
plot.caption = element_text(face = "italic", size = 8, hjust = .5, vjust = 8),
legend.spacing.x = unit(0, 'cm'),
legend.title=element_text(size=11),
legend.text = element_text(size = rel(0.6)),
legend.margin=margin(10,0,-1,0),
legend.position = 'bottom',
plot.margin = margin(0, -.5, 0, -.5, "cm"),
legend.box.margin=margin(-30,0,15,0))  +
guides(fill=guide_legend(
keywidth=.5,
keyheight=.15,
default.unit="inch",
label.position = 'bottom',
title.position = 'top',
title.hjust = .5,
title.vjust = 0,
label.vjust = 3,
nrow = 1)) +
labs(title = "Confirmed Deaths Due To COVID-19 Per Million Residents",
caption  = paste0("Data updated ", format(Sys.time(), "%b %d %X")),
subtitle = paste0("Total Confirmed Deaths Due To COVID-19 In The United States: ", scales::comma_format()(sum(df$death, na.rm = TRUE))))
#Use the cowplot package to color in the white area
cowplot::ggdraw(p) +
theme(plot.background = element_rect(fill="floralwhite", color = NA))
p
install.packages("loadfonts")
warnings()
name = "Confirmed Deaths Per Million Residents",
palette = 10,
trans = "log10",
breaks = scales::log_breaks(n = 8)) +
theme_owen()  +
scale_color_identity() +
theme(text=element_text(size=14,  family="Gill Sans MT"),
plot.title = element_text(hjust = 0.5, face = "bold",  vjust = 0, size = 15),
plot.subtitle = element_text(hjust = 0.5, size = 9, vjust = 0),
plot.caption = element_text(face = "italic", size = 8, hjust = .5, vjust = 8),
legend.spacing.x = unit(0, 'cm'),
legend.title=element_text(size=11),
legend.text = element_text(size = rel(0.6)),
legend.margin=margin(10,0,-1,0),
legend.position = 'bottom',
plot.margin = margin(0, -.5, 0, -.5, "cm"),
legend.box.margin=margin(-30,0,15,0))  +
guides(fill=guide_legend(
keywidth=.5,
keyheight=.15,
default.unit="inch",
label.position = 'bottom',
title.position = 'top',
title.hjust = .5,
title.vjust = 0,
label.vjust = 3,
nrow = 1)) +
labs(title = "Confirmed Deaths Due To COVID-19 Per Million Residents",
caption  = paste0("Data updated ", format(Sys.time(), "%b %d %X")),
subtitle = paste0("Total Confirmed Deaths Due To COVID-19 In The United States: ", scales::comma_format()(sum(df$death, na.rm = TRUE))))
keywidth=.5,
keyheight=.15,
default.unit="inch",
label.position = 'bottom',
title.position = 'top',
title.hjust = .5,
title.vjust = 0,
label.vjust = 3,
nrow = 1)) +
labs(title = "Confirmed Deaths Due To COVID-19 Per Million Residents",
caption  = paste0("Data updated ", format(Sys.time(), "%b %d %X")),
subtitle = paste0("Total Confirmed Deaths Due To COVID-19 In The United States: ", scales::comma_format()(sum(df$death, na.rm = TRUE))))
keywidth=.5,
keyheight=.15,
default.unit="inch",
label.position = 'bottom',
title.position = 'top',
title.hjust = .5,
title.vjust = 0,
label.vjust = 3,
nrow = 1)) +
labs(title = "Confirmed Deaths Due To COVID-19 Per Million Residents",
caption  = paste0("Data updated ", format(Sys.time(), "%b %d %X")),
subtitle = paste0("Total Confirmed Deaths Due To COVID-19 In The United States: ", scales::comma_format()(sum(df$death, na.rm = TRUE))))
#Create plot
p <- df %>%
ggplot() +
geom_sf(aes(fill = total.deaths.per.million), size = 1, color = 'white') +
geom_sf(data = us_hex_outline, color = "#F7945DFF", fill = "transparent", size = 1) +
geom_text(data = df, aes(x, y, label = state_abbr, color = textColor),
family = "Gill Sans MT", size = 2.25, fontface = 'bold') +
geom_text(data = df, aes(x, y, label = round(total.deaths.per.million, 2), color = textColor),
family = "Gill Sans MT", size = 2, fontface = 'bold', vjust = 2.5)+
rcartocolor::scale_fill_carto_c(
name = "Confirmed Deaths Per Million Residents",
palette = 10,
trans = "log10",
breaks = scales::log_breaks(n = 8)) +
theme_owen()  +
scale_color_identity() +
theme(text=element_text(size=14,  family="Gill Sans MT"),
plot.title = element_text(hjust = 0.5, face = "bold",  vjust = 0, size = 15),
plot.subtitle = element_text(hjust = 0.5, size = 9, vjust = 0),
plot.caption = element_text(face = "italic", size = 8, hjust = .5, vjust = 8),
legend.spacing.x = unit(0, 'cm'),
legend.title=element_text(size=11),
legend.text = element_text(size = rel(0.6)),
legend.margin=margin(10,0,-1,0),
legend.position = 'bottom',
plot.margin = margin(0, -.5, 0, -.5, "cm"),
legend.box.margin=margin(-30,0,15,0))  +
guides(fill=guide_legend(
keywidth=.5,
keyheight=.15,
default.unit="inch",
label.position = 'bottom',
title.position = 'top',
title.hjust = .5,
title.vjust = 0,
label.vjust = 3,
nrow = 1)) +
labs(title = "Confirmed Deaths Due To COVID-19 Per Million Residents",
caption  = paste0("Data updated ", format(Sys.time(), "%b %d %X")),
subtitle = paste0("Total Confirmed Deaths Due To COVID-19 In The United States: ", scales::comma_format()(sum(df$death, na.rm = TRUE))))
p
loadfonts(device = "win")
loadfonts(dev = "win")
?loadfonts
loadfonts(dev = "postscript")
library(extrafont)
extrafont::font_import()
warnings()
loadfonts(dev = "postscript")
loadfonts(dev = "win")
??windowsFonts
library(grDevices)
loadfonts(dev = "win")
windowsFonts()
grDevices::windowsFonts()
library(grDevices)
grDevices::windowsFonts
